"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([["3466"],{2276:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>i,default:()=>h,toc:()=>c,metadata:()=>s,assets:()=>p,contentTitle:()=>l});var s=JSON.parse('{"id":"misc","title":"Miscellaneous projects","description":"Running shell commands in python","source":"@site/docs/misc.mdx","sourceDirName":".","slug":"/misc","permalink":"/python-tutorial/misc","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/python-tutorial/blob/main/docs/misc.mdx","tags":[],"version":"current","frontMatter":{"title":"Miscellaneous projects","sidebar_label":"Miscellaneous"},"sidebar":"docs","previous":{"title":"Learning log","permalink":"/python-tutorial/django/learning-log"},"next":{"title":"Resources","permalink":"/python-tutorial/resources"}}'),r=t(5893),o=t(65),a=t(2834);let i={title:"Miscellaneous projects",sidebar_label:"Miscellaneous"},l=void 0,p={},c=[{value:"Running shell commands in python",id:"running-shell-commands-in-python",level:3},{value:"Sort dictionary based on keys with order defined in a list",id:"sort-dictionary-based-on-keys-with-order-defined-in-a-list",level:3},{value:"Jupyter notebooks of various python projects",id:"jupyter-notebooks-of-various-python-projects",level:3}];function d(n){let e={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"running-shell-commands-in-python",children:"Running shell commands in python"}),"\n",(0,r.jsx)(e.p,{children:"Single line shell commands examples:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'import subprocess\n\n# example 1\nsubprocess.run("echo \'hello\'", shell=True, check=True, text=True)\n\n# example 2\nsubprocess.run(\'cd /tmp; pwd\', shell=True)\n\n# example 3\ninput_text = "Welcome guest"\nmessage = subprocess.run(["echo", input_text], text=True, \\\n    capture_output=True)\nprint(message.stdout)\n'})}),"\n",(0,r.jsx)(e.p,{children:"Multiline example:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"cmd = '''cd /tmp;\npwd;\n'''\n\nsubprocess.run(cmd, shell=True, check=True, text=True, \\\n    universal_newlines=True, executable='/bin/bash')\n"})}),"\n",(0,r.jsxs)(e.p,{children:["A more comprehensive example: Encrypt a folder recursively using ",(0,r.jsx)(e.code,{children:"openssl"}),"."]}),"\n","\n",(0,r.jsx)(a.Z,{language:"python",title:"src/encrypt_folder_openssl.py",showLineNumbers:!0,children:'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nProgram: Encrypt folder recursively using openssl\nVersion: 20220105\n@author: Pranab Das (GitHub: @pranabdas)\nRun: python3 filename.py\n"""\nimport os\nimport subprocess\nimport getpass\n\n# ask folder to encrypt\npath = input("Please enter the directory/path to encrypt: ")\n\n# Remove any trailing \'/\'\nif (path[-1] == "/"):\n    path = path[:-1]\n\n# Get absolute path in case relative path is entered\npath = os.path.abspath(path)\n\n# New directory name\nnew_path = path + "_enc"\n\n# check openssl is installed\ntry:\n    openssl_version = subprocess.run(["openssl", "version"],\n                                     text=True, capture_output=True)\nexcept:\n    print("openssl not found. Exiting ...")\n    exit()\n\n# ask and confirm password\npasswd = getpass.getpass(prompt="Please enter encryption password: ")\npasswd_confirm = getpass.getpass(prompt="Please confirm your password: ")\n\nif (passwd == passwd_confirm):\n    pass\nelse:\n    print("Password mismatch! Exiting ...")\n    exit()\n\nprint("\\nPlease wait. Encrypting...")\n\nfor root, dirs, files in os.walk(path):\n\n    # Create the folder structure\n    if path in root:\n        try:\n            os.mkdir(root.replace(path, new_path))\n        except FileExistsError:\n            pass\n\n    # encrypt files using openssl\n    if (files != []):\n        for file in files:\n            file_path = root + "/" + file\n            new_file_path = file_path.replace(path, new_path) + ".enc"\n\n            cmd = f\'\'\'openssl enc -e -aes-256-cbc \\\n                      -salt \\\n                      -iter 1000000 \\\n                      -md sha512 \\\n                      -k {passwd} \\\n                      -in {file_path} \\\n                      -out {new_file_path}\n                   \'\'\'\n            subprocess.run(cmd, shell=True, check=True, text=True,\n                           universal_newlines=True, executable="/bin/bash")\n\nprint("\\nDone. Encrypted files are placed under:\\n", new_path)\n'}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:["Conversely, you can also include ",(0,r.jsx)(e.a,{href:"https://pranabdas.github.io/linux/shell-scripting#running-python-code-in-bash-script",children:"python code in shell script"}),"."]})}),"\n",(0,r.jsx)(e.h3,{id:"sort-dictionary-based-on-keys-with-order-defined-in-a-list",children:"Sort dictionary based on keys with order defined in a list"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# orbitals are ordered in terms of stability\norbital_list = [\n    "1s",\n    "2s",\n    "2p",\n    "3s",\n    "3p",\n    "4s",\n    "3d",\n    "4p",\n    "5s",\n    "4d",\n    "5p",\n    "6s",\n    "4f",\n    "5d",\n    "6p",\n    "7s",\n    "5f",\n    "6d",\n    "7p",\n    "8s",\n]\n\nvalence_config = [\n    {\n        "orbital": "1s",\n        "max_occ": 2\n    },\n    {\n        "orbital": "2s",\n        "max_occ": 2\n    },\n    {\n        "orbital": "3s",\n        "max_occ": 2\n    },\n    {\n        "orbital": "2p",\n        "max_occ": 6\n    },\n    {\n        "orbital": "3p",\n        "max_occ": 6\n    },\n    {\n        "orbital": "3d",\n        "max_occ": 10\n    }\n]\n\n# sorted in-place\nvalence_config.sort(key=lambda x: orbital_list.index(x["orbital"]))\n\n# print(valence_config)\n# [\n#     {\n#         \'orbital\': \'1s\',\n#         \'max_occ\': 2\n#     },\n#     {\n#         \'orbital\': \'2s\',\n#         \'max_occ\': 2\n#     },\n#     {\n#         \'orbital\': \'2p\',\n#         \'max_occ\': 6\n#     },\n#     {\n#         \'orbital\': \'3s\',\n#         \'max_occ\': 2\n#     },\n#     {\n#         \'orbital\': \'3p\',\n#         \'max_occ\': 6\n#     },\n#     {\n#         \'orbital\': \'3d\',\n#         \'max_occ\': 10\n#     }\n# ]\n'})}),"\n",(0,r.jsx)(e.h3,{id:"jupyter-notebooks-of-various-python-projects",children:"Jupyter notebooks of various python projects"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/Quantum-Design-SQIUD-data-loader.ipynb",children:"Quantum Design SQUID data loader"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/encrypt-decrypt-directory.ipynb",children:"How to encrypt (and decrypt) a directory?"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/dataframe-encryption.ipynb",children:"Encryption pandas dataframe"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/encrypt-dropbox.ipynb",children:"Encrypt and upload to Dropbox"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/save-any-data-as-text-in-google-docs.ipynb",children:"Save any data as text in Google Docs"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/singapore-traffic-camera.ipynb",children:"Singapore traffic camera"})}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);