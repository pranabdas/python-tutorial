"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([["5889"],{2467:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>o,default:()=>c,toc:()=>h,metadata:()=>t,assets:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"algorithms/sorting","title":"Sorting","description":"Selection sort","source":"@site/docs/algorithms/sorting.mdx","sourceDirName":"algorithms","slug":"/algorithms/sorting","permalink":"/python-tutorial/algorithms/sorting","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/python-tutorial/blob/main/docs/algorithms/sorting.mdx","tags":[],"version":"current","frontMatter":{"title":"Sorting"},"sidebar":"docs","previous":{"title":"Algorithms","permalink":"/python-tutorial/category/algorithms"},"next":{"title":"Hashing","permalink":"/python-tutorial/algorithms/hashing"}}'),i=r(5893),a=r(65),s=r(2834);let o={title:"Sorting"},l=void 0,d={},h=[{value:"Selection sort",id:"selection-sort",level:2},{value:"Insertion sort",id:"insertion-sort",level:2},{value:"Merge sort",id:"merge-sort",level:2},{value:"Resources",id:"resources",level:2}];function g(n){let e={h2:"h2",li:"li",ul:"ul",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"selection-sort",children:"Selection sort"}),"\n","\n",(0,i.jsx)(s.Z,{language:"python",title:"src/selection_sort.py",showLineNumbers:!0,children:'# Say we are given the following array to sort: 5 8 2 3 7 9\n# Step 1: find the biggest element in first (n - 1) element and swap it with the\n# last element if it is bigger than the last element else do nothing\n# Step 2: find biggest element in first (n - 2) element, and swap it with\n# (n-1)th element if it is bigger\n\ndef selection_sort(arr):\n    # note that `arr` will be mutated and modified in-place, if you wat to\n    # preserve, make deep copy by `arr_copy = arr.copy()` before modifying and\n    # return modified array\n    n = len(arr)\n    for i in range(n - 1):\n        biggest = max(arr[:(n - 1 - i)])\n        id = arr.index(biggest)\n        if biggest > arr[n - 1 - i]:\n            arr[n - 1 - i], arr[id] = arr[id], arr[n - 1 - i]\n        print("Step", i + 1, "=>", arr)\n\n\nif __name__ == "__main__":\n    arr = [5, 8, 2, 7, 6, 5]\n    print("Un-order input:", arr)\n    selection_sort(arr)\n    print("Sorted output :", arr)\n'}),"\n",(0,i.jsx)(e.h2,{id:"insertion-sort",children:"Insertion sort"}),"\n","\n",(0,i.jsx)(s.Z,{language:"python",title:"src/insertion_sort.py",showLineNumbers:!0,children:'# here we start sorting part of the array, then compare and insert next element\n# so that the part with next element is sorted\n\ndef insertion_sort(arr):\n    if len(arr) < 2:\n        return\n\n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j] < arr[j - 1]:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n        print("Step", i, "=>", arr)\n\n\nif __name__ == "__main__":\n    arr = [5, 8, 2, 7, 6, 5]\n    print("Un-order input:", arr)\n    insertion_sort(arr)\n    print("Sorted output :", arr)\n'}),"\n",(0,i.jsx)(e.h2,{id:"merge-sort",children:"Merge sort"}),"\n","\n",(0,i.jsx)(s.Z,{language:"python",title:"src/merge_sort.py",showLineNumbers:!0,children:'# recursively divide the array in two, sort each and merge them, much faster\n# than selection and insertion sort, takes `n log(n)` time\n\ndef merge_sort(A, a = 0, b = None):\n    if b is None:\n        b = len(A)\n    if 1 < b - a:\n        c = (a + b + 1) // 2\n        merge_sort(A, a, c)\n        merge_sort(A, c, b)\n        L, R = A[a:c], A[c:b]\n        i, j = 0, 0\n        while a < b:\n            if (j >= len(R)) or (i < len(L) and L[i] < R[j]):\n                A[a] = L[i]\n                i += 1\n            else:\n                A[a] = R[j]\n                j += 1\n            a=a+1\n\n\nif __name__ == "__main__":\n    arr = [5, 8, 2, 7, 6, 5]\n    print("Un-order input:", arr)\n    merge_sort(arr)\n    print("Sorted output :", arr)\n'}),"\n",(0,i.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)("a",{target:"_blank",href:r(8032).Z,children:"Notes from MIT OCW"}),"\n"]}),"\n"]})]})}function c(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(g,{...n})}):g(n)}},8032:function(n,e,r){r.d(e,{Z:()=>t});let t=r.p+"assets/files/MIT6_006S20_r03_sorting-0d388861e858099d2d60b052dfc1468a.pdf"}}]);