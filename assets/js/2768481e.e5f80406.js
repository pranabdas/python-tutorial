"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([["7524"],{6412:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>s,default:()=>c,toc:()=>o,metadata:()=>a,assets:()=>l,contentTitle:()=>r});var a=JSON.parse('{"id":"matplotlib/3d-sph","title":"3D spherical plots","description":"Plotting spherical harmonics in 3D wireframe:","source":"@site/docs/matplotlib/3d-sph.md","sourceDirName":"matplotlib","slug":"/matplotlib/3d-sph","permalink":"/python-tutorial/matplotlib/3d-sph","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/python-tutorial/blob/main/docs/matplotlib/3d-sph.md","tags":[],"version":"current","frontMatter":{"title":"3D spherical plots"},"sidebar":"docs","previous":{"title":"Interactive plots","permalink":"/python-tutorial/matplotlib/interactive-plots"},"next":{"title":"3D volume plots","permalink":"/python-tutorial/matplotlib/3d-vol"}}'),i=t(5893),p=t(65);let s={title:"3D spherical plots"},r=void 0,l={},o=[{value:"Wrapping an image onto a sphere",id:"wrapping-an-image-onto-a-sphere",level:3}];function h(n){let e={code:"code",h3:"h3",p:"p",pre:"pre",...(0,p.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Plotting spherical harmonics in 3D wireframe:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.special import sph_harm\n%matplotlib inline\nplt.rcParams[\"figure.dpi\"] = 150\nplt.rcParams[\"figure.facecolor\"]=\"white\"\n# plt.style.use('dark_background')\n# plt.style.use('default')\n\nm, l = 0, 0\nphi = np.linspace(0, np.pi, 30)\ntheta = np.linspace(0, 2*np.pi, 45)\nphi, theta = np.meshgrid(phi, theta)\n\nr = sph_harm(m, l, theta, phi).real\nx = np.abs(r) * np.sin(phi) * np.cos(theta)\ny = np.abs(r) * np.sin(phi) * np.sin(theta)\nz = np.abs(r) * np.cos(phi)\n\nfig = plt.figure(figsize=(6, 6))\nax = plt.subplot(projection=\"3d\")\nax.plot_surface(x, y, z, color='aqua', edgecolor='k')\nplt.axis('off')\nplt.show()\n"})}),"\n",(0,i.jsx)("img",{src:t(383).Z,alt:"3d-sph-harm"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"m, l = 2, 3\nphi = np.linspace(0, np.pi, 100)\ntheta = np.linspace(0, 2*np.pi, 100)\nphi, theta = np.meshgrid(phi, theta)\n\nfunc = sph_harm(m, l, theta, phi).real\n\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nfig = plt.figure(figsize=(6, 6))\nax = plt.subplot(projection=\"3d\")\n\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\nplt.show()\n"})}),"\n",(0,i.jsx)("img",{src:t(9127).Z,alt:"3d-sph-harm-2"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"m, l = 2, 3\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(2, 3, 6, projection='3d')\nax.set_title('l=3, m=2')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\n\nm, l = 1, 3\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nax = fig.add_subplot(2, 3, 5, projection='3d')\nax.set_title('l=3, m=1')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\n\nm, l = 0, 3\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nax = fig.add_subplot(2, 3, 4, projection='3d')\nax.set_title('l=3, m=0')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\n\n\nm, l = 1, 2\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nax = fig.add_subplot(2, 3, 3, projection='3d')\nax.set_title('l=2, m=1')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\n\nm, l = 0, 2\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nax = fig.add_subplot(2, 3, 2, projection='3d')\nax.set_title('l=2, m=0')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\n\nm, l = 0, 1\nfunc = sph_harm(m, l, theta, phi).real\nx = np.abs(func) * np.sin(phi) * np.cos(theta)\ny = np.abs(func) * np.sin(phi) * np.sin(theta)\nz = np.abs(func) * np.cos(phi)\n\nax = fig.add_subplot(2, 3, 1, projection='3d')\nax.set_title('l=1, m=0')\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, color='white',\n                       shade=False, edgecolor='k')\nplt.axis('off')\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,i.jsx)("img",{src:t(5498).Z,alt:"3d-sph-harm-3"}),"\n",(0,i.jsx)(e.h3,{id:"wrapping-an-image-onto-a-sphere",children:"Wrapping an image onto a sphere"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"import numpy as np\nimport matplotlib.image as image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline\nplt.rcParams[\"figure.dpi\"] = 150\nplt.style.use('dark_background')\n# plt.style.use('default')\n\nearth = image.imread('../datafiles/earth_texture2048x1024.png')\nxp, yp, __ = earth.shape\n\nx = np.arange(0, xp, 1)\ny = np.arange(0, yp, 1)\nY, X = np.meshgrid(y, x)\n\nphi = np.linspace(0, 2 * np.pi, yp)\ntheta = np.linspace(0, np.pi, xp)\nphigrid, thetagrid = np.meshgrid(phi, theta)\n\nx = np.sin(thetagrid) * np.cos(phigrid)\ny = np.sin(thetagrid) * np.sin(phigrid)\nz = np.cos(thetagrid)\n\nfig = plt.figure(figsize=(12,12))\nax = plt.subplot(projection='3d')\nax.dist=20\nax.view_init(elev=10, azim=60)\n\nax.plot_surface(x, y, z, facecolors=earth,\n                rstride=4, cstride=4,\n                antialiased=True, shade=False)\n\nax.set_xlim3d([-1.25, 1.25])\nax.set_ylim3d([-1.25, 1.25])\nplt.axis('off')\nplt.show()\n"})}),"\n",(0,i.jsx)("img",{src:t(2137).Z,alt:"3d-earth"}),"\n",(0,i.jsx)(e.p,{children:"Making series of images with different rotation view:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"fig = plt.figure(figsize=(12,12))\nax = fig.gca(projection='3d')\nax.dist=20\n\nfor azim in range(0, 360, 5):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    ax.plot_surface(x, y, z, facecolors=earth,\n                rstride=4, cstride=4,\n                antialiased=False, shade=False)\n\n    ax.view_init(elev=10, azim=azim)\n\n    filename = 'temp/earth'+ \"{0:0=3d}\".format(azim) + '.png'\n    plt.axis('off')\n    plt.savefig(filename, dpi=300, bbox_inches='tight', pad_inches=0)\n    ax.set_xlim3d([-1.25, 1.25])\n    ax.set_ylim3d([-1.25, 1.25])\n    plt.gca()\n    plt.clf()\n"})}),"\n",(0,i.jsx)(e.p,{children:"Making a gif from multiple images:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:"from PIL import Image\nimport glob\n\n# Create the frames\nframes = []\nimgs = glob.glob(\"temp/*.png\")\nfor i in imgs:\n    new_frame = Image.open(i)\n    frames.append(new_frame)\n\nframes[0].save('earth.gif', format='GIF',\n               append_images=frames[1:],\n               save_all=True,\n               duration=300, loop=0)\n"})})]})}function c(n={}){let{wrapper:e}={...(0,p.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},2137:function(n,e,t){t.d(e,{Z:()=>a});let a=t.p+"assets/images/3d-earth-cd594501342baa9a59055902d2bf6492.webp"},9127:function(n,e,t){t.d(e,{Z:()=>a});let a=t.p+"assets/images/3d-sph-harm-2-1fa7ff431f753021ab233f3833d6be4c.webp"},5498:function(n,e,t){t.d(e,{Z:()=>a});let a=t.p+"assets/images/3d-sph-harm-3-71a88262e7e162da217d149a4aeda78c.webp"},383:function(n,e,t){t.d(e,{Z:()=>a});let a=t.p+"assets/images/3d-sph-harm-8faad5cbde30526cd36cc157fba57cb7.webp"},65:function(n,e,t){t.d(e,{Z:()=>r,a:()=>s});var a=t(7294);let i={},p=a.createContext(i);function s(n){let e=a.useContext(p);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(p.Provider,{value:e},n.children)}}}]);