"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([["4943"],{4155:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>d,default:()=>p,toc:()=>o,metadata:()=>s,assets:()=>r,contentTitle:()=>l});var s=JSON.parse('{"id":"pandas","title":"Pandas","description":"pandas module helps us to work with tabular data. It is more like a","source":"@site/docs/pandas.md","sourceDirName":".","slug":"/pandas","permalink":"/python-tutorial/pandas","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/python-tutorial/blob/main/docs/pandas.md","tags":[],"version":"current","frontMatter":{"title":"Pandas"},"sidebar":"docs","previous":{"title":"Convolution","permalink":"/python-tutorial/scipy/convolution"},"next":{"title":"Multiprocessing","permalink":"/python-tutorial/multiprocessing"}}'),t=a(5893),i=a(65);let d={title:"Pandas"},l=void 0,r={},o=[{value:"Installation",id:"installation",level:2},{value:"Dataframe",id:"dataframe",level:2},{value:"Excel and CSV",id:"excel-and-csv",level:2},{value:"Datatype",id:"datatype",level:2},{value:"Text manipulation",id:"text-manipulation",level:2},{value:"Customizing pandas",id:"customizing-pandas",level:2},{value:"Notebooks",id:"notebooks",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pandas"})," module helps us to work with tabular data. It is more like a\nspreadsheet program. We can perform various data manipulation, cleaning, and\neven visualization using ",(0,t.jsx)(n.strong,{children:"pandas"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Install pandas package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install pandas\n\n# for Microsoft Excel compatibility\npip install xlrd openpyxl\n\n# for handling missing data\npip install missingno\n"})}),"\n",(0,t.jsx)(n.h2,{id:"dataframe",children:"Dataframe"}),"\n",(0,t.jsx)(n.p,{children:"Dataframe is like a variable that can hold a whole table. It is more than a\nvariable, it is a python object. It has properties and methods. Let us create\nsome tabular data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\n# Create a python dictionary\ndata = {'Names':  ['Student 1', 'Student 2', 'Student 3'],\n        'Age': [14, 15, 15],\n        'Height': [150, 145, 152]\n        }\n\n# dataframe form a dictionary\ndf = pd.DataFrame(data)\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can visualize the table in Jupyter notebook:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df  # this shows rich view\n\n# alternatively print plaintext tables\nprint(df)\n\n       Names  Age  Height\n0  Student 1   14     150\n1  Student 2   15     145\n2  Student 3   15     152\n"})}),"\n",(0,t.jsx)(n.p,{children:"Each column in a dataframe is a pandas series. We can select columns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df["Height"]\n\n0    150\n1    145\n2    152\nName: Height, dtype: int64\n'})}),"\n",(0,t.jsx)(n.p,{children:"Find the shape of the dataframe:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.shape\n\n(3, 3)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let us append a new row of data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df = df.append({'Names' : 'Student 4', \\\n                'Age' : 16, \\\n                'Height' : 155}, \\\n                ignore_index=True)\nprint(df)\n\n       Names  Age  Height\n0  Student 1   14     150\n1  Student 2   15     145\n2  Student 3   15     152\n3  Student 4   16     155\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"shape"})," is a property of the dataframe, while ",(0,t.jsx)(n.code,{children:"append"})," is a method.\nGeneral convention is: ",(0,t.jsx)(n.code,{children:"object.prop"})," to get a property value and\n",(0,t.jsx)(n.code,{children:"object.function()"})," to perform some operation."]}),"\n",(0,t.jsx)(n.p,{children:"Assign a new column:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# add new column\ngrades = ["A", "B", "C", "B"]\ndf[\'grades\'] = grades\nprint(df)\n\n       Names  Age  Height grades\n0  Student 1   14     150      A\n1  Student 2   15     145      B\n2  Student 3   15     152      C\n3  Student 4   16     155      B\n'})}),"\n",(0,t.jsx)(n.p,{children:"Insert column in a specific location:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.pop('grades')  # remove last column\ndf.insert(1, 'Grades', grades)\nprint(df)\n\n       Names Grades  Age  Height\n0  Student 1      A   14     150\n1  Student 2      B   15     145\n2  Student 3      C   15     152\n3  Student 4      B   16     155\n"})}),"\n",(0,t.jsx)(n.p,{children:"Edit row:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.loc[1] = ['Student 2', 'A', 15, 147]\nprint(df)\n\n       Names Grades  Age  Height\n0  Student 1      A   14     150\n1  Student 2      A   15     147\n2  Student 3      C   15     152\n3  Student 4      B   16     155\n"})}),"\n",(0,t.jsx)(n.p,{children:"Delete a row:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.drop(df.index[[2]], inplace=True)\n\n# Drop last row\n# df.drop(df.index[[-1]], inplace=True)\n\nprint(df)\n\n       Names Grades  Age  Height\n0  Student 1      A   14     150\n1  Student 2      A   15     147\n3  Student 4      B   16     155\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sort by column:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df.sort_values(by="Age", ascending=False)\n\n	Names	Grades	Age	Height\n3	Student 4	B	16	155\n1	Student 2	A	15	147\n0	Student 1	A	14	150\n'})}),"\n",(0,t.jsx)(n.p,{children:"Select columns based on values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df[df["Height"] >= 150]\n\n	Names	Grades	Age	Height\n0	Student 1	A	14	150\n3	Student 4	B	16	155\n'})}),"\n",(0,t.jsx)(n.h2,{id:"excel-and-csv",children:"Excel and CSV"}),"\n",(0,t.jsxs)(n.p,{children:["Save to ",(0,t.jsx)(n.code,{children:".csv"})," or ",(0,t.jsx)(n.code,{children:".xlsx"})," format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Save as both excel and csv\ndf.to_csv('student_info.csv', index=False)\ndf.to_excel('student_info.xlsx', index=False)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Read ",(0,t.jsx)(n.code,{children:".csv"})," or ",(0,t.jsx)(n.code,{children:".xlsx"})," files:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df_copy_csv = pd.read_csv('student_info.csv')\ndf_copy_xlsx = pd.read_excel('student_info.xlsx')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now let us try to load a larger dataset to explore:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'url = "https://pranabdas.github.io/drive/datasets/iris/iris.csv"\nnames = ["sepal_len", "sepal_width", "petal_len", "petal_width", "species"]\ndf = pd.read_csv(url, header=None, names=names)\n'})}),"\n",(0,t.jsx)(n.p,{children:"First, let us check the size of the dataframe:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.shape\n\n(150, 5)\n"})}),"\n",(0,t.jsx)(n.p,{children:"We have 150 rows and 5 columns of data. We can see the top of the dataset by:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.head()\n\nsepal_len	sepal_width	petal_len	petal_width	species\n0	5.1	3.5	1.4	0.2	Iris-setosa\n1	4.9	3.0	1.4	0.2	Iris-setosa\n2	4.7	3.2	1.3	0.2	Iris-setosa\n3	4.6	3.1	1.5	0.2	Iris-setosa\n4	5.0	3.6	1.4	0.2	Iris-setosa\n"})}),"\n",(0,t.jsx)(n.p,{children:"By default this shows first 5 rows, we can see any number of rows by:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.head(10)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Similarly, we can see the tail of the dataframe as well:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.tail()\n\nsepal_len	sepal_width	petal_len	petal_width	species\n145	6.7	3.0	5.2	2.3	Iris-virginica\n146	6.3	2.5	5.0	1.9	Iris-virginica\n147	6.5	3.0	5.2	2.0	Iris-virginica\n148	6.2	3.4	5.4	2.3	Iris-virginica\n149	5.9	3.0	5.1	1.8	Iris-virginica\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can also see any arbitrary rows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.loc[15:20]\n\nsepal_len	sepal_width	petal_len	petal_width	species\n15	5.7	4.4	1.5	0.4	Iris-setosa\n16	5.4	3.9	1.3	0.4	Iris-setosa\n17	5.1	3.5	1.4	0.3	Iris-setosa\n18	5.7	3.8	1.7	0.3	Iris-setosa\n19	5.1	3.8	1.5	0.3	Iris-setosa\n20	5.4	3.4	1.7	0.2	Iris-setosa\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can also select specific rows and columns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df.loc[15:20, "sepal_len"]\n\n15    5.7\n16    5.4\n17    5.1\n18    5.7\n19    5.1\n20    5.4\nName: sepal_len, dtype: float64\n'})}),"\n",(0,t.jsx)(n.p,{children:"Instead of column header names, its index can be used:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.iloc[15:20, 0:2]\n\n\nsepal_len	sepal_width\n15	5.7	4.4\n16	5.4	3.9\n17	5.1	3.5\n18	5.7	3.8\n19	5.1	3.8\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Notice that for indexing ",(0,t.jsx)(n.code,{children:"loc"})," and ",(0,t.jsx)(n.code,{children:"iloc"})," behaves differently."]}),"\n",(0,t.jsx)(n.h2,{id:"datatype",children:"Datatype"}),"\n",(0,t.jsx)(n.p,{children:"Checking the data types. While importing, pandas might not correctly set the\ndatatype for your data. You can check the datatype by:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.dtypes\n\nsepal_len      float64\nsepal_width    float64\npetal_len      float64\npetal_width    float64\nspecies         object\ndtype: object\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can change a datatype of a column using ",(0,t.jsx)(n.code,{children:"astype"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df["sepal_len"] = df["sepal_len"].astype(int)\ndf.dtypes\n\nsepal_len        int64\nsepal_width    float64\npetal_len      float64\npetal_width    float64\nspecies         object\ndtype: object\n'})}),"\n",(0,t.jsx)(n.h2,{id:"text-manipulation",children:"Text manipulation"}),"\n",(0,t.jsx)(n.p,{children:'Say, I want to remove the "Iris-" prefix from the species names:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df["species"] = df["species"].str.replace("Iris-", "")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Remove leading or trailing spaces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df["species"] = df["species"].str.strip()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Say, I want to make the names uppercase or lowercase or title formatted:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'df["species"] = df["species"].str.title()\n# df["species"] = df["species"].str.upper()\n# df["species"] = df["species"].str.lower()\ndf.head()\n\n\nsepal_len	sepal_width	petal_len	petal_width	species\n0	5.1	3.5	1.4	0.2	Setosa\n1	4.9	3.0	1.4	0.2	Setosa\n2	4.7	3.2	1.3	0.2	Setosa\n3	4.6	3.1	1.5	0.2	Setosa\n4	5.0	3.6	1.4	0.2	Setosa\n'})}),"\n",(0,t.jsx)(n.p,{children:"We create a new pandas series to make some more data manipulation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = pd.Series(['Albert Einstein', 'Richard Feynman', 'Issac Newton'])\n"})}),"\n",(0,t.jsx)(n.p,{children:"We want to reorder the first and last names:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = names.str.split(\" \")\nnames = pd.Series([i[::-1] for i in names])\nnames = [\" \".join(i) for i in names]\nprint(names)\n\n['Einstein Albert', 'Feynman Richard', 'Newton Issac']\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-pandas",children:"Customizing pandas"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pd.set_options('max_rows', 5)\npd.set_options('max_columns', 4)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"notebooks",children:"Notebooks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/pandas-dataframe.ipynb",children:"Pandas dataframe"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/pranabdas/python-tutorial/blob/master/notebooks/pandas-csv-excel.ipynb",children:"Working with CSV and Excel file format"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you have issues with viewing the notebooks in web browser, please clone or\ndownload the repository and open the notebooks in Jupyter notebook."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["If you are interested in advanced use of pandas, please check out my\n",(0,t.jsx)(n.a,{href:"https://pranabdas.github.io/machine-learning/",children:"machine learning"})," tutorial and\nnotebooks."]})})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65:function(e,n,a){a.d(n,{Z:()=>l,a:()=>d});var s=a(7294);let t={},i=s.createContext(t);function d(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);